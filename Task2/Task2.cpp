#define _USE_MATH_DEFINES  // Включение математических констант, таких как M_PI, из cmath
#include <iostream>  // Для работы с вводом и выводом
#include <cmath>     // Для математических функций и констант

using namespace std;

// Функция для нормализации значений радианов к [0, 2π]
double normalizeRadians(double x) {
    double twoPi = 2 * M_PI;
    return x - twoPi * floor(x / twoPi);  // Приведение значения к диапазону [0, 2π]
}

// Функция для вычисления косинуса по ряду Маклорена с заданной точностью
double calculateCos(double x, double epsilon) {
    double term = 1.0;  // Первый член ряда Маклорена (cos(0) = 1)
    double result = term;  // Сумма ряда, начальная инициализация
    int n = 1;  // Индекс для вычисления следующих членов ряда

    // Продолжение вычисления, пока значение члена больше заданной точности epsilon
    while (abs(term) > epsilon) {
        term = -term * x * x / ((2 * n - 1) * (2 * n));  // Вычисление следующего члена ряда
        result += term;  // Добавление следующего члена к сумме ряда
        n++;
    }

    return result;
}

int main() {
    setlocale(0, "");

    double x0, epsilon;  // Переменные для значения x и заданной точности epsilon
    char choice;  // Переменная для выбора единиц измерения угла (радианы или градусы)

    cout << "Введите значение x0: ";
    cin >> x0;

    cout << "Значение x0 задано в радианах или градусах? (r/g): ";
    cin >> choice;

    // Преобразование градусов в радианы, если выбрано 'g'
    if (choice == 'g') {
        x0 = x0 * M_PI / 180.0;  // Преобразование градусов в радианы
    }

    // Приведение значения x0 к диапазону [0, 2π]
    x0 = normalizeRadians(x0);

    // Ввод значения точности epsilon
    cout << "Введите точность epsilon (например, 0.001): ";
    cin >> epsilon;

    // Проверка на корректность значения epsilon
    if (epsilon <= 0) {
        cout << "Ошибка: значение epsilon должно быть положительным и не должно равняться нулю." << endl;
        return 1;  // Завершение программы с кодом ошибки
    }

    // Вычисление значения косинуса с заданной точностью
    double cosValue = calculateCos(x0, epsilon);

    // Установка формата вывода чисел с фиксированной точностью

    cout << "cos(" << x0 << " радиан) = " << cosValue << " с точностью " << epsilon << endl;

    return 0;
}